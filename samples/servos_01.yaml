# servos_01.yaml
# Using a PCA9685 board to drive SG90 servos for point motor control.

substitutions:
  # Global variable. Update this if you feel the servos are throwing too quickly.
  turnout_speed: 10s
  
  # per-servo vars - turnout 1. You will need to copy/paste these two lines,
  # update the names (eg. turnout_02, turnout_03) etc as you add more servos.
  turnout_01_name: balloon_loop_xover 
  turnout_01_topic: "/trains/track/turnout/SWI/Staging/Balloon Loop" # This should match what you configure in CATS.


web_server:
# WebUI Stuff. We need the webserver to make realtime updates to point motor endpoints.

number:
# each point has 4 'template' entries, one for normal/reverse and backoff/normal endpoints. these again should be copied, 
# and the 'turnout_01' updated for 'turnout_02', 'turnout_03' etc. This code below is what you see in the web portal to update your 
# servos in realtime, and save the values to the ESP.
  - platform: template
    name: ${turnout_01_name}_servo_endpoint_normal
    id: turnout_01_name_servo_endpoint_normal
    min_value: -50
    max_value: 50
    initial_value: 0
    restore_value: true
    optimistic: true
    step: 0.1
    set_action:
      then:
        - servo.write:
            id: ${turnout_01_name}_servo
            level: !lambda 'return x / 100.0;'

  - platform: template
    name: ${turnout_01_name}_servo_endpoint_normal_backoff
    id: turnout_01_name_servo_endpoint_normal_backoff
    min_value: -50
    max_value: 50
    initial_value: 0
    restore_value: true
    optimistic: true
    step: 0.1
    set_action:
      then:
        - servo.write:
            id: ${turnout_01_name}_servo
            level: !lambda 'return x / 100.0;'

  - platform: template
    name: ${turnout_01_name}_servo_endpoint_reverse
    id: turnout_01_name_servo_endpoint_reverse
    min_value: -50
    max_value: 50
    initial_value: 0
    restore_value: true
    optimistic: true
    step: 0.1
    set_action:
      then:
        - servo.write:
            id: ${turnout_01_name}_servo
            level: !lambda 'return x / 100.0;'

  - platform: template
    name: ${turnout_01_name}_servo_endpoint_reverse_backoff
    id: turnout_01_name_servo_endpoint_reverse_backoff
    min_value: -50
    max_value: 50
    initial_value: 0
    restore_value: true
    optimistic: true
    step: 0.1
    set_action:
      then:
        - servo.write:
            id: ${turnout_01_name}_servo
            level: !lambda 'return x / 100.0;'

esphome:
  on_boot:
  
    - priority: -200.0
      then:
        - logger.log:
            format: 'Publishing Topics'
            level: INFO
            tag: init
       # copy/paste the code below for each servo. This allows you to initialise each servo to normal whenever
       # the ESP boots, so your control system is in sync.
        - mqtt.publish:
            topic: ${turnout_01_topic}
            payload: 'CLOSED'
        - delay: 1s

i2c:
  # change these pins depending on where you plug your PCA board into.
  sda: 33
  scl: 32
  scan: true
  id: bus_a

pca9685:
  - id: pca9685_hub1
    frequency: 50Hz

output:
 # copy/paste this code for each servo you add. Update the channel to the number on the board you've plugged into, and update the
 # id as per the previous copy/paste exercises.
  - platform: pca9685
    channel: 0
    pca9685_id: 'pca9685_hub1'
    id: ${turnout_01_name}_output

servo:
  # copy/paste this code for each servo you add, and update the
  # id as per the previous copy/paste exercises.
  - id: ${turnout_01_name}_servo
    output: ${turnout_01_name}_output
    auto_detach_time: 0s # set to 0s so we don't detach and cause weird flip outs when re-attaching.
    transition_length: $turnout_speed

text_sensor:
  # copy/paste this code for each servo you add, and update the
  # id as per the previous copy/paste exercises.
  # this is the actual code throwing the servo based on an MQTT topic it listens to, from the substiutions defined at the top
  # of this file.
  - platform: mqtt_subscribe
    name: "${turnout_01_name}_state"
    id: $turnout_01_name
    topic: $turnout_01_topic
    on_value:
      - if:
          condition:
            text_sensor.state:
              id: $turnout_01_name
              state: 'THROWN'
          then:
            - logger.log:
                format: "${turnout_01_name} : REVERSE"
                level: INFO
                tag: servo_control
            - logger.log:
                format: "%.1f"
                args: [id(turnout_01_name_servo_endpoint_reverse).state]
                level: INFO
                tag: servo_control
            - logger.log:
                format: "%.1f"
                args: [id(turnout_01_name_servo_endpoint_reverse_backoff).state]
                level: INFO
                tag: servo_control
            - servo.write:
                id: ${turnout_01_name}_servo
                level: !lambda 'return id(turnout_01_name_servo_endpoint_reverse).state / 100.0;'
            - delay: 1s
            - servo.write:
                id: ${turnout_01_name}_servo
                level: !lambda 'return id( turnout_01_name_servo_endpoint_reverse_backoff).state / 100.0;'
            - mqtt.publish:
                topic: "${turnout_01_topic}/State"
                payload: "THROWN"
      - if:
          condition:
            text_sensor.state:
              id: $turnout_01_name
              state: 'CLOSED'
          then:
            - logger.log:
                format: "${turnout_01_name} : NORMAL"
                level: INFO
                tag: servo_control
            - logger.log:
                format: "%.1f"
                args: [id(turnout_01_name_servo_endpoint_normal).state]
                level: INFO
                tag: servo_control
            - servo.write:
                id: ${turnout_01_name}_servo
                level: !lambda 'return id(turnout_01_name_servo_endpoint_normal).state / 100.0;'
            - delay: 1s
            - logger.log:
                format: "%.1f"
                args: [id(turnout_01_name_servo_endpoint_normal_backoff).state]
                level: INFO
                tag: servo_control
            - servo.write:
                id: ${turnout_01_name}_servo
                level: !lambda 'return id(turnout_01_name_servo_endpoint_normal_backoff).state / 100.0;'
            - mqtt.publish:
                topic: "${turnout_01_topic}/State"
                payload: "CLOSED"
